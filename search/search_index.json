{"config":{"indexing":"full","lang":["en","ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Crypto Pay is a payment system based on @CryptoBot , which allows you to accept payments in cryptocurrency using the API. This library help you to work with Crypto Pay via Crypto Pay API in yours Python scripts. Documentation available on English language \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043d\u0430 \u0420\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435","title":"Home"},{"location":"#home","text":"Crypto Pay is a payment system based on @CryptoBot , which allows you to accept payments in cryptocurrency using the API. This library help you to work with Crypto Pay via Crypto Pay API in yours Python scripts. Documentation available on English language \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u043d\u0430 \u0420\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435","title":"Home"},{"location":"get_token/","text":"Get API token To get a CryptoPay API token, you need to contact the bot @CryptoBot . Using the testnet To get a token in the test network, you should contact the bot @CryptoTestnetBot , and follow this instruction. About bot Check bot name Before using the bot, make sure that the information about the bot matches the one below! For main bot @CryptoBot : from test bot @CryptoTestnetBot : Start bot Use the /start command in the bot to exit to the main menu and press the button \ud83c\udfdd\ufe0f Crypto Pay Creating of application Click the Create application button, CryptoBot will automatically create an application for you with a unique name. Getting API token Click the \"API token\" button to see your API token, it consists of an application identifier and a unique string in the format 000000:XXXXXXXXXXXXXXXXXXXXXXXXX Using of token After receiving the token, use it when creating an instance of the class CryptoPay like this CryptoPay('000000:XXXXXXXXXXXXXXXXXXXXXXXXX') . Warning Don't forget to set the testnet=True flag if you are using a test bot token, otherwise authorization will fail.","title":"Get API token"},{"location":"get_token/#get-api-token","text":"To get a CryptoPay API token, you need to contact the bot @CryptoBot . Using the testnet To get a token in the test network, you should contact the bot @CryptoTestnetBot , and follow this instruction.","title":"Get API token"},{"location":"get_token/#about-bot","text":"Check bot name Before using the bot, make sure that the information about the bot matches the one below! For main bot @CryptoBot : from test bot @CryptoTestnetBot :","title":"About bot"},{"location":"get_token/#start-bot","text":"Use the /start command in the bot to exit to the main menu and press the button \ud83c\udfdd\ufe0f Crypto Pay","title":"Start bot"},{"location":"get_token/#creating-of-application","text":"Click the Create application button, CryptoBot will automatically create an application for you with a unique name.","title":"Creating of application"},{"location":"get_token/#getting-api-token","text":"Click the \"API token\" button to see your API token, it consists of an application identifier and a unique string in the format 000000:XXXXXXXXXXXXXXXXXXXXXXXXX","title":"Getting API token"},{"location":"get_token/#using-of-token","text":"After receiving the token, use it when creating an instance of the class CryptoPay like this CryptoPay('000000:XXXXXXXXXXXXXXXXXXXXXXXXX') . Warning Don't forget to set the testnet=True flag if you are using a test bot token, otherwise authorization will fail.","title":"Using of token"},{"location":"install/","text":"Install The library can be installed in several ways: With PYPI With pip+git From source pip install pycryptopay-sdk pip install git+https://github.com/LulzLoL231/pyCryptoPayAPI.git pip install . # (1)! Execute in root folder.","title":"Install"},{"location":"install/#install","text":"The library can be installed in several ways: With PYPI With pip+git From source pip install pycryptopay-sdk pip install git+https://github.com/LulzLoL231/pyCryptoPayAPI.git pip install . # (1)! Execute in root folder.","title":"Install"},{"location":"examples/get_me/","text":"Get application # -*- coding: utf-8 -*- # # pyCryptoPayAPI - get_me example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN ) app = await cp . get_me () print ( 'Application: ' , app ) run ( main ())","title":"Get application"},{"location":"examples/get_me/#get-application","text":"# -*- coding: utf-8 -*- # # pyCryptoPayAPI - get_me example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN ) app = await cp . get_me () print ( 'Application: ' , app ) run ( main ())","title":"Get application"},{"location":"examples/testnet_usage/","text":"Use testnet # -*- coding: utf-8 -*- # # pyCryptoPayAPI - Testnet example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN , testnet = True ) app = await cp . get_me () print ( 'Testnet application: ' , app ) run ( main ())","title":"Use testnet"},{"location":"examples/testnet_usage/#use-testnet","text":"# -*- coding: utf-8 -*- # # pyCryptoPayAPI - Testnet example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN , testnet = True ) app = await cp . get_me () print ( 'Testnet application: ' , app ) run ( main ())","title":"Use testnet"},{"location":"examples/transfer_usage/","text":"Transfer crypto # -*- coding: utf-8 -*- # # pyCryptoPayAPI - Transfer example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay from CryptoPayAPI.schemas import Assets TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN , testnet = True ) if input ( 'You want to donate me 3 USDT? -> ' ) . lower () in [ 'n' , 'no' , '-' ]: print ( 'Okay :(' ) exit () transfer = cp . transfer ( 265300852 , Assets . USDT , 3.0 , 'pCBA226ghd' , comment = 'donate' ) print ( 'Transfer: ' , transfer ) run ( main ())","title":"Transfer crypto"},{"location":"examples/transfer_usage/#transfer-crypto","text":"# -*- coding: utf-8 -*- # # pyCryptoPayAPI - Transfer example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay from CryptoPayAPI.schemas import Assets TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN , testnet = True ) if input ( 'You want to donate me 3 USDT? -> ' ) . lower () in [ 'n' , 'no' , '-' ]: print ( 'Okay :(' ) exit () transfer = cp . transfer ( 265300852 , Assets . USDT , 3.0 , 'pCBA226ghd' , comment = 'donate' ) print ( 'Transfer: ' , transfer ) run ( main ())","title":"Transfer crypto"},{"location":"examples/webhook_example/","text":"Webhook Using fastapi as a server. # -*- coding: utf-8 -*- # # pyCryptoPayAPI - webhook example usage. # Created by LulzLoL231 at 12/9/22 # from os import environ from uvicorn import run from fastapi import FastAPI , Request from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) app = FastAPI ( openapi_tags = None , # disable docs generating redoc_url = None # disable docs generating ) cp = CryptoPay ( TOKEN ) @app . post ( '/' ) async def process_update ( request : Request ): body = await request . body () headers = dict ( request . headers ) update = await cp . process_webhook_update ( body , headers ) print ( f 'Recieved { update . payload . amount } { update . payload . asset } !' ) return 'ok' if __name__ == '__main__' : run ( app )","title":"Webhook"},{"location":"examples/webhook_example/#webhook","text":"Using fastapi as a server. # -*- coding: utf-8 -*- # # pyCryptoPayAPI - webhook example usage. # Created by LulzLoL231 at 12/9/22 # from os import environ from uvicorn import run from fastapi import FastAPI , Request from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) app = FastAPI ( openapi_tags = None , # disable docs generating redoc_url = None # disable docs generating ) cp = CryptoPay ( TOKEN ) @app . post ( '/' ) async def process_update ( request : Request ): body = await request . body () headers = dict ( request . headers ) update = await cp . process_webhook_update ( body , headers ) print ( f 'Recieved { update . payload . amount } { update . payload . asset } !' ) return 'ok' if __name__ == '__main__' : run ( app )","title":"Webhook"},{"location":"en/get_token/","text":"Get API token To get a CryptoPay API token, you need to contact the bot @CryptoBot . Using the testnet To get a token in the test network, you should contact the bot @CryptoTestnetBot , and follow this instruction. About bot Check bot name Before using the bot, make sure that the information about the bot matches the one below! For main bot @CryptoBot : from test bot @CryptoTestnetBot : Start bot Use the /start command in the bot to exit to the main menu and press the button \ud83c\udfdd\ufe0f Crypto Pay Creating of application Click the Create application button, CryptoBot will automatically create an application for you with a unique name. Getting API token Click the \"API token\" button to see your API token, it consists of an application identifier and a unique string in the format 000000:XXXXXXXXXXXXXXXXXXXXXXXXX Using of token After receiving the token, use it when creating an instance of the class [ CryptoPay ][src.CryptoPayAPI.CryptoPay] like this CryptoPay('000000:XXXXXXXXXXXXXXXXXXXXXXXXX') . Warning Don't forget to set the testnet=True flag if you are using a test bot token, otherwise authorization will fail.","title":"Get API token"},{"location":"en/get_token/#using-of-token","text":"After receiving the token, use it when creating an instance of the class [ CryptoPay ][src.CryptoPayAPI.CryptoPay] like this CryptoPay('000000:XXXXXXXXXXXXXXXXXXXXXXXXX') . Warning Don't forget to set the testnet=True flag if you are using a test bot token, otherwise authorization will fail.","title":"Using of token"},{"location":"ru/get_token/","text":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 API \u0442\u043e\u043a\u0435\u043d\u0430 \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f CryptoPay API \u0442\u043e\u043a\u0435\u043d\u0430, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a \u0431\u043e\u0442\u0443 @CryptoBot . \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438 \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438, \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043a \u0431\u043e\u0442\u0443 @CryptoTestnetBot , \u0438 \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0431\u043e\u0442\u0435 \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u0430 \u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u043e\u0442\u0430, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c \u0447\u0442\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0431\u043e\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u043d\u0438\u0436\u0435! \u0414\u043b\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0431\u043e\u0442\u0430 @CryptoBot : \u0414\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0431\u043e\u0442\u0430 @CryptoTestnetBot : \u0412\u0445\u043e\u0434 \u0432 \u0431\u043e\u0442\u0430 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 /start \u0432 \u0431\u043e\u0442\u0435 \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e \u0438 \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \ud83c\udfdd\ufe0f Crypto Pay \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u041d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 , CryptoBot \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u0432\u0430\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 API \u0442\u043e\u043a\u0435\u043d\u0430 \u041d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \"API-\u0442\u043e\u043a\u0435\u043d\" \u0447\u0442\u043e\u0431\u044b \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0441\u0432\u043e\u0439 API \u0442\u043e\u043a\u0435\u043d, \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u043e\u043d \u0438\u0437 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 000000:XXXXXXXXXXXXXXXXXXXXXXXXX \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u041f\u043e\u043b\u0443\u0447\u0438\u0432 \u0442\u043e\u043a\u0435\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 [ CryptoPay ][src.CryptoPayAPI.CryptoPay] \u0432\u043e\u0442 \u0442\u0430\u043a CryptoPay('000000:XXXXXXXXXXXXXXXXXXXXXXXXX') . \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0444\u043b\u0430\u0433 testnet=True \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0442\u043e\u043a\u0435\u043d \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0431\u043e\u0442\u0430, \u0438\u043d\u0430\u0447\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430.","title":"Get API token"},{"location":"ru/get_token/#api","text":"\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f CryptoPay API \u0442\u043e\u043a\u0435\u043d\u0430, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a \u0431\u043e\u0442\u0443 @CryptoBot . \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438 \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438, \u043e\u0431\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043a \u0431\u043e\u0442\u0443 @CryptoTestnetBot , \u0438 \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438.","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 API \u0442\u043e\u043a\u0435\u043d\u0430"},{"location":"ru/get_token/#_1","text":"\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u0430 \u041f\u0435\u0440\u0435\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u043e\u0442\u0430, \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c \u0447\u0442\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0431\u043e\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u043d\u0438\u0436\u0435! \u0414\u043b\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0431\u043e\u0442\u0430 @CryptoBot : \u0414\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0431\u043e\u0442\u0430 @CryptoTestnetBot :","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0431\u043e\u0442\u0435"},{"location":"ru/get_token/#_2","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 /start \u0432 \u0431\u043e\u0442\u0435 \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043c\u0435\u043d\u044e \u0438 \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \ud83c\udfdd\ufe0f Crypto Pay","title":"\u0412\u0445\u043e\u0434 \u0432 \u0431\u043e\u0442\u0430"},{"location":"ru/get_token/#_3","text":"\u041d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 , CryptoBot \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0441\u0442 \u0432\u0430\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0438\u043c\u0435\u043d\u0435\u043c.","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"ru/get_token/#api_1","text":"\u041d\u0430\u0436\u043c\u0438\u0442\u0435 \u043a\u043d\u043e\u043f\u043a\u0443 \"API-\u0442\u043e\u043a\u0435\u043d\" \u0447\u0442\u043e\u0431\u044b \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0441\u0432\u043e\u0439 API \u0442\u043e\u043a\u0435\u043d, \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u043e\u043d \u0438\u0437 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 000000:XXXXXXXXXXXXXXXXXXXXXXXXX","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 API \u0442\u043e\u043a\u0435\u043d\u0430"},{"location":"ru/get_token/#_4","text":"\u041f\u043e\u043b\u0443\u0447\u0438\u0432 \u0442\u043e\u043a\u0435\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 [ CryptoPay ][src.CryptoPayAPI.CryptoPay] \u0432\u043e\u0442 \u0442\u0430\u043a CryptoPay('000000:XXXXXXXXXXXXXXXXXXXXXXXXX') . \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0444\u043b\u0430\u0433 testnet=True \u0435\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0442\u043e\u043a\u0435\u043d \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0431\u043e\u0442\u0430, \u0438\u043d\u0430\u0447\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430.","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430"},{"location":"ru/install/","text":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438: \u0427\u0435\u0440\u0435\u0437 PYPI \u0427\u0435\u0440\u0435\u0437 pip+git \u0418\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u043e\u0432 pip install pycryptopay-sdk pip install git+https://github.com/LulzLoL231/pyCryptoPayAPI.git pip install . # (1)! \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0435 \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439","title":"Install"},{"location":"ru/install/#_1","text":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438: \u0427\u0435\u0440\u0435\u0437 PYPI \u0427\u0435\u0440\u0435\u0437 pip+git \u0418\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u043e\u0432 pip install pycryptopay-sdk pip install git+https://github.com/LulzLoL231/pyCryptoPayAPI.git pip install . # (1)! \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432 \u043f\u0430\u043f\u043a\u0435 \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430"},{"location":"ru/examples/get_me/","text":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f # -*- coding: utf-8 -*- # # pyCryptoPayAPI - get_me example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN ) app = await cp . get_me () print ( 'Application: ' , app ) run ( main ())","title":"Get application"},{"location":"ru/examples/get_me/#_1","text":"# -*- coding: utf-8 -*- # # pyCryptoPayAPI - get_me example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN ) app = await cp . get_me () print ( 'Application: ' , app ) run ( main ())","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"ru/examples/testnet_usage/","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438 # -*- coding: utf-8 -*- # # pyCryptoPayAPI - Testnet example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN , testnet = True ) app = await cp . get_me () print ( 'Testnet application: ' , app ) run ( main ())","title":"Use testnet"},{"location":"ru/examples/testnet_usage/#_1","text":"# -*- coding: utf-8 -*- # # pyCryptoPayAPI - Testnet example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN , testnet = True ) app = await cp . get_me () print ( 'Testnet application: ' , app ) run ( main ())","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0435\u0442\u0438"},{"location":"ru/examples/transfer_usage/","text":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b # -*- coding: utf-8 -*- # # pyCryptoPayAPI - Transfer example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay from CryptoPayAPI.schemas import Assets TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN , testnet = True ) if input ( 'You want to donate me 3 USDT? -> ' ) . lower () in [ 'n' , 'no' , '-' ]: print ( 'Okay :(' ) exit () transfer = cp . transfer ( 265300852 , Assets . USDT , 3.0 , 'pCBA226ghd' , comment = 'donate' ) print ( 'Transfer: ' , transfer ) run ( main ())","title":"Transfer crypto"},{"location":"ru/examples/transfer_usage/#_1","text":"# -*- coding: utf-8 -*- # # pyCryptoPayAPI - Transfer example usage. # Created by LulzLoL231 at 3/6/22 # from os import environ from asyncio import run from CryptoPayAPI import CryptoPay from CryptoPayAPI.schemas import Assets TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) async def main (): cp = CryptoPay ( TOKEN , testnet = True ) if input ( 'You want to donate me 3 USDT? -> ' ) . lower () in [ 'n' , 'no' , '-' ]: print ( 'Okay :(' ) exit () transfer = cp . transfer ( 265300852 , Assets . USDT , 3.0 , 'pCBA226ghd' , comment = 'donate' ) print ( 'Transfer: ' , transfer ) run ( main ())","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b"},{"location":"ru/examples/webhook_example/","text":"Webhook \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c fastapi \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. # -*- coding: utf-8 -*- # # pyCryptoPayAPI - webhook example usage. # Created by LulzLoL231 at 12/9/22 # from os import environ from uvicorn import run from fastapi import FastAPI , Request from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) app = FastAPI ( openapi_tags = None , # disable docs generating redoc_url = None # disable docs generating ) cp = CryptoPay ( TOKEN ) @app . post ( '/' ) async def process_update ( request : Request ): body = await request . body () headers = dict ( request . headers ) update = await cp . process_webhook_update ( body , headers ) print ( f 'Recieved { update . payload . amount } { update . payload . asset } !' ) return 'ok' if __name__ == '__main__' : run ( app )","title":"Webhook"},{"location":"ru/examples/webhook_example/#webhook","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c fastapi \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. # -*- coding: utf-8 -*- # # pyCryptoPayAPI - webhook example usage. # Created by LulzLoL231 at 12/9/22 # from os import environ from uvicorn import run from fastapi import FastAPI , Request from CryptoPayAPI import CryptoPay TOKEN = environ . get ( 'CRYPTOPAY_API_TOKEN' , '' ) if not TOKEN : print ( 'Use shell argument \"CRYPTOPAY_API_TOKEN\" for your Crypto Pay API token!' ) exit ( 1 ) app = FastAPI ( openapi_tags = None , # disable docs generating redoc_url = None # disable docs generating ) cp = CryptoPay ( TOKEN ) @app . post ( '/' ) async def process_update ( request : Request ): body = await request . body () headers = dict ( request . headers ) update = await cp . process_webhook_update ( body , headers ) print ( f 'Recieved { update . payload . amount } { update . payload . asset } !' ) return 'ok' if __name__ == '__main__' : run ( app )","title":"Webhook"}]}